DOS and the early Mac OS have a single large address space shared by all programs,
so under these systems the mapping did not provide any benefits. These realizations
led to a series of second generation microkernels, which further reduced the complexity
of the system and placed almost all functionality in the user space. For instance,
the L4 kernel (version 2) includes only seven system calls and uses 12k of memory,
[3] whereas Mach 3 includes about 140 functions and uses about 330k of memory. [3]
IPC calls under L4 on a 486DX-50 take only 5μs, [20] faster than a UNIX syscall on
the same system, and over 20 times as fast as Mach. Of course this ignores the fact
that L4 is not handling permissioning or security; but by leaving this to the user-space
programs, they can select as much or as little overhead as they require. The potential
performance gains of L4 are tempered by the fact that the user-space applications
will often have to provide many of the functions formerly supported by the kernel.
In order to test the end-to-end performance, MkLinux in co-located mode was compared
with an L4 port running in user-space. L4 added about 5%–10% overhead, [14] compared
to Mach's 29%. [14] The following is a list of operating system kernels derived from